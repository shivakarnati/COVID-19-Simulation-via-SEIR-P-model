Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getLine = getLine;
exports.moveNext = moveNext;
exports.get = get;
exports.getLocalContext = getLocalContext;
exports.select = select;

// TODO: docstrings

var _scopes = require('./scopes');

'use babel';
function getLine(ed, l) {
  return {
    scope: ed.scopeDescriptorForBufferPosition([l, 0]).scopes,
    line: ed.getTextInBufferRange([[l, 0], [l, Infinity]])
  };
}

function isBlank(_ref) {
  var line = _ref.line;
  var scope = _ref.scope;
  var allowDocstrings = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

  for (var s of scope) {
    if (/\bcomment\b/.test(s) || !allowDocstrings && /\bdocstring\b/.test(s)) {
      return true;
    }
  }
  return (/^\s*(#.*)?$/.test(line)
  );
}
function isEnd(_ref2) {
  var line = _ref2.line;
  var scope = _ref2.scope;

  if (isStringEnd({ line: line, scope: scope })) {
    return true;
  }
  return (/^(end\b|\)|\]|\})/.test(line)
  );
}
function isStringEnd(_ref3) {
  var line = _ref3.line;
  var scope = _ref3.scope;

  scope = scope.join(' ');
  return (/\bstring\.multiline\.end\b/.test(scope) || /\bstring\.end\b/.test(scope) && /\bbacktick\b/.test(scope)
  );
}
function isCont(_ref4) {
  var line = _ref4.line;
  var scope = _ref4.scope;

  scope = scope.join(' ');
  if (/\bstring\b/.test(scope) && !/\bpunctuation\.definition\.string\b/.test(scope)) {
    return true;
  }

  return line.match(/^(else|elseif|catch|finally)\b/);
}
function isStart(lineInfo) {
  return !(/^\s/.test(lineInfo.line) || isBlank(lineInfo) || isEnd(lineInfo) || isCont(lineInfo));
}

function walkBack(ed, row) {
  while (row > 0 && !isStart(getLine(ed, row))) {
    row--;
  }
  return row;
}

function walkForward(ed, start) {
  var end = start;
  var mark = start;
  while (mark < ed.getLastBufferRow()) {
    mark++;
    var lineInfo = getLine(ed, mark);

    if (isStart(lineInfo)) {
      break;
    }
    if (isEnd(lineInfo)) {
      // An `end` only counts when  there still are unclosed blocks (indicated by `forLines`
      // returning a non-empty array).
      // If the line closes a multiline string we also take that as ending the block.
      if (!((0, _scopes.forLines)(ed, start, mark - 1).length === 0) || isStringEnd(lineInfo)) {
        end = mark;
      }
    } else if (!(isBlank(lineInfo) || isStart(lineInfo))) {
      end = mark;
    }
  }
  return end;
}

function getRange(ed, row) {
  var start = walkBack(ed, row);
  var end = walkForward(ed, start);
  if (start <= row && row <= end) {
    return [[start, 0], [end, Infinity]];
  }
}

function getSelection(ed, sel) {
  var _sel$getBufferRange = sel.getBufferRange();

  var start = _sel$getBufferRange.start;
  var end = _sel$getBufferRange.end;

  var range = [[start.row, start.column], [end.row, end.column]];
  while (isBlank(getLine(ed, range[0][0]), true) && range[0][0] <= range[1][0]) {
    range[0][0]++;
    range[0][1] = 0;
  }
  while (isBlank(getLine(ed, range[1][0]), true) && range[1][0] >= range[0][0]) {
    range[1][0]--;
    range[1][1] = Infinity;
  }
  return range;
}

function moveNext(ed, sel, range) {
  // Ensure enough room at the end of the buffer
  var row = range[1][0];
  var last = undefined;
  while ((last = ed.getLastBufferRow()) < row + 2) {
    if (last !== row && !isBlank(getLine(ed, last))) {
      break;
    }
    sel.setBufferRange([[last, Infinity], [last, Infinity]]);
    sel.insertText('\n');
  }
  // Move the cursor
  var to = row + 1;
  while (to < ed.getLastBufferRow() && isBlank(getLine(ed, to))) {
    to++;
  }
  to = walkForward(ed, to);
  return sel.setBufferRange([[to, Infinity], [to, Infinity]]);
}

function getRanges(ed) {
  var ranges = ed.getSelections().map(function (sel) {
    return {
      selection: sel,
      range: sel.isEmpty() ? getRange(ed, sel.getHeadBufferPosition().row) : getSelection(ed, sel)
    };
  });
  return ranges.filter(function (_ref5) {
    var range = _ref5.range;

    return range && ed.getTextInBufferRange(range).trim();
  });
}

function get(ed) {
  return getRanges(ed).map(function (_ref6) {
    var range = _ref6.range;
    var selection = _ref6.selection;

    return {
      range: range,
      selection: selection,
      line: range[0][0],
      text: ed.getTextInBufferRange(range)
    };
  });
}

function getLocalContext(editor, row) {
  var range = getRange(editor, row);
  var context = range ? editor.getTextInBufferRange(range) : '';
  // NOTE:
  // backend code expects startRow to be number for most cases, e.g.: `row = row - startRow`
  // so let's just return `0` when there is no local context
  // to check there is a context or not, just check `isempty(context)`
  var startRow = range ? range[0][0] : 0;
  return {
    context: context,
    startRow: startRow
  };
}

function select() {
  var ed = arguments.length <= 0 || arguments[0] === undefined ? atom.workspace.getActiveTextEditor() : arguments[0];

  if (!ed) return;
  return ed.mutateSelectedText(function (selection) {
    var range = getRange(ed, selection.getHeadBufferPosition().row);
    if (range) {
      selection.setBufferRange(range);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,