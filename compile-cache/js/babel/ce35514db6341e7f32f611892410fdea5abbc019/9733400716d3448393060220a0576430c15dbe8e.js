Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getCode = getCode;
exports.getCursorCellRanges = getCursorCellRanges;
exports.moveNext = moveNext;
exports.movePrev = movePrev;
exports.get = get;

require('atom');

'use babel';

function getCode(ed) {
  var text = ed.getText();
  var lines = text.split("\n");
  var N = ed.getLineCount();
  var code = "";

  for (var i = 0; i < N; i++) {
    var scopes = ed.scopeDescriptorForBufferPosition([i, 0]).scopes;
    if (scopes.length > 1) {
      if (scopes.indexOf("source.embedded.julia") > -1) {
        code += lines[i] + "\n";
      }
    }
  }
  return code;
}

function getEmbeddedScope(cursor) {
  var scopes = cursor.getScopeDescriptor().scopes;
  var targetScope = null;
  for (var scope of scopes) {
    if (scope.startsWith('source.embedded.')) {
      targetScope = scope;
      break;
    }
  }
  return targetScope;
}

function getCurrentCellRange(ed, cursor) {
  var scope = getEmbeddedScope(cursor);
  if (scope === null) return null;

  var start = cursor.getBufferRow();
  var end = start;
  while (start - 1 >= 0 && ed.scopeDescriptorForBufferPosition([start - 1, 0]).scopes.indexOf(scope) > -1) {
    start -= 1;
  }
  while (end + 1 <= ed.getLastBufferRow() && ed.scopeDescriptorForBufferPosition([end + 1, 0]).scopes.indexOf(scope) > -1) {
    end += 1;
  }
  return [[start, 0], [end, Infinity]];
}

function getCursorCellRanges(ed) {
  var ranges = [];
  for (var cursor of ed.getCursors()) {
    var range = getCurrentCellRange(ed, cursor);
    if (range !== null) {
      ranges.push(range);
    }
  }
  return ranges;
}

function moveNext(ed) {
  for (var cursor of ed.getCursors()) {
    var scope = getEmbeddedScope(cursor);
    if (scope === null) return null;

    var range = getCurrentCellRange(ed, cursor);
    var endRow = range[1][0] + 1;
    while (endRow + 1 <= ed.getLastBufferRow() && ed.scopeDescriptorForBufferPosition([endRow + 1, 0]).scopes.indexOf(scope) === -1) {
      endRow += 1;
    }
    cursor.setBufferPosition([endRow + 1, Infinity]);
  }
}

function movePrev(ed) {
  for (var cursor of ed.getCursors()) {
    var scope = getEmbeddedScope(cursor);
    if (scope === null) return null;

    var range = getCurrentCellRange(ed, cursor);
    var startRow = range[0][0] - 1;
    while (startRow - 1 >= 0 && ed.scopeDescriptorForBufferPosition([startRow - 1, 0]).scopes.indexOf(scope) === -1) {
      startRow -= 1;
    }
    cursor.setBufferPosition([startRow - 1, Infinity]);
  }
}

function get(ed) {
  var ranges = getCursorCellRanges(ed);
  if (ranges.length === 0) return [];

  var processedRanges = [];
  for (var range of ranges) {
    var text = ed.getTextInBufferRange(range);
    range[1][0] += 1; // move result one line down
    processedRanges.push({
      range: range,
      selection: ed.getSelections()[0],
      line: range[0][0],
      text: text || ' '
    });
  }
  return processedRanges;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,