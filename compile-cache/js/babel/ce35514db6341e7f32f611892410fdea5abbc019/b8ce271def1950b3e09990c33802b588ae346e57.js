Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.activate = activate;
exports.deactivate = deactivate;

var _miscCells = require('../misc/cells');

var _atom = require('atom');

var _miscBlocksJs = require('../misc/blocks.js');

'use babel';

var subs = undefined;
var edSubs = undefined;
var marker = undefined;
var borders = [];

function activate() {
    subs = new _atom.CompositeDisposable();
    edSubs = new _atom.CompositeDisposable();

    subs.add(atom.workspace.observeActiveTextEditor(function (ed) {
        if (ed && ed.getGrammar && ed.getGrammar().id === 'source.julia') {
            if (edSubs && edSubs.dispose) {
                edSubs.dispose();
                edSubs = new _atom.CompositeDisposable();
            }
            borders = highlightCellBorders(ed, borders);

            marker = highlightCurrentCell(ed, marker, borders);

            edSubs.add(ed.onDidChangeCursorPosition(function (ev) {
                marker = highlightCurrentCell(ed, marker, borders);
            }));

            edSubs.add(ed.onDidStopChanging(function () {
                borders = highlightCellBorders(ed, borders);
                marker = highlightCurrentCell(ed, marker, borders);
            }));

            edSubs.add(ed.onDidDestroy(function () {
                marker && marker.destroy && marker.destroy();
                borders.forEach(function (m) {
                    return m.destroy();
                });
                edSubs.dispose();
            }));

            edSubs.add(ed.onDidChangeGrammar(function (grammar) {
                marker && marker.destroy && marker.destroy();
                borders.forEach(function (m) {
                    return m.destroy();
                });

                if (ed.getGrammar().id == 'source.julia') {
                    borders = highlightCellBorders(ed, borders);
                    marker = highlightCurrentCell(ed, marker, borders);
                }
            }));
        }
    }));
}

function highlightCurrentCell(ed, marker, borders) {
    if (borders.length === 0) {
        marker && marker.destroy && marker.destroy();
        return null;
    }

    var range = (0, _miscCells.getRange)(ed);

    range[1].row += 1;
    range[1].column = 0;

    if (marker && marker.destroy) {
        var mrange = marker.getBufferRange();
        if (mrange.start.row == range[0].row && mrange.end.row == range[1].row) {
            return marker;
        } else {
            marker.destroy();
        }
    }

    marker = ed.markBufferRange(range);
    ed.decorateMarker(marker, {
        type: 'line-number',
        'class': 'julia-current-cell'
    });
    ed.decorateMarker(marker, {
        type: 'line',
        'class': 'julia-current-cell'
    });

    return marker;
}

function highlightCellBorders(ed, borders) {
    borders.forEach(function (m) {
        return m.destroy();
    });

    var regexString = '^(' + atom.config.get('julia-client.uiOptions.cellDelimiter').join('|') + ')';
    var regex = new RegExp(regexString);

    var buffer = ed.getBuffer();

    borders = [];

    for (var i = 0; i <= buffer.getEndPosition().row; i++) {
        var _getLine = (0, _miscBlocksJs.getLine)(ed, i);

        var line = _getLine.line;
        var scope = _getLine.scope;

        if (regex.test(line) && scope.join('.').indexOf('comment.line') > -1) {
            var m = ed.markBufferRange([[i, 0], [i, Infinity]]);
            ed.decorateMarker(m, {
                type: 'line',
                'class': 'julia-cell-border'
            });
            borders.push(m);
        }
    }

    return borders;
}

function destroyMarkers() {
    marker && marker.destroy && marker.destroy();
    borders.forEach(function (m) {
        return m.destroy();
    });
    marker = null;
    borders = [];
}

function deactivate() {
    destroyMarkers();
    subs && subs.dispose && subs.dispose();
    edSubs && edSubs.dispose && edSubs.dispose();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,