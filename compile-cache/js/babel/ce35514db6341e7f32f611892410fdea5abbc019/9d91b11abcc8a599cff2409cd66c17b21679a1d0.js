Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.activate = activate;
exports.deactivate = deactivate;
exports.consumeStatusBar = consumeStatusBar;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

var _atom = require('atom');

var _status = require('./status');

var _status2 = _interopRequireDefault(_status);

var _selector = require('./selector');

var _selector2 = _interopRequireDefault(_selector);

'use babel';

var possibleIndentations = [];
var enableDebug = false;
var manual = new Set();
var subs = undefined;

function activate() {
  subs = new _atom.CompositeDisposable();
  _status2['default'].activate();

  subs.add(atom.workspace.observeTextEditors(function (ed) {
    run(ed);
    var sub = ed.onDidStopChanging(function () {
      run(ed);
    });
    subs.add(ed.onDidDestroy(function () {
      sub.dispose();
      manual['delete'](ed);
    }));
  }), atom.workspace.onDidStopChangingActivePaneItem(function (item) {
    if (item instanceof _atom.TextEditor) {
      run(item);
    } else {
      _status2['default'].update();
    }
  }), atom.commands.add('atom-text-editor', {
    'indent-detective:choose-indent': function indentDetectiveChooseIndent() {
      return select();
    }
  }), atom.config.observe('indent-detective.possibleIndentations', function (opts) {
    possibleIndentations = opts.map(function (el) {
      return parseInt(el);
    });
  }), atom.config.observe('indent-detective.enableDebugMessages', function (val) {
    enableDebug = val;
  }));
}

function deactivate() {
  subs.dispose();
  manual.clear();
  _status2['default'].deactivate();
}

function consumeStatusBar(bar) {
  _status2['default'].consumeStatusBar(bar);
}

function run(editor) {
  if (editor.isDestroyed()) return;
  if (!manual.has(editor)) {
    setSettings(editor, getIndent(editor));
  }

  _status2['default'].update(editor);
}

function setSettings(editor, indent) {
  if (enableDebug) {
    console.log('-> decided for ' + indent);
  }
  if (indent == 0) return; // default settings

  if (indent == 'tab') {
    editor.setSoftTabs(false);
  } else if (indent >= Math.min.apply(Math, _toConsumableArray(possibleIndentations)) && indent <= Math.max.apply(Math, _toConsumableArray(possibleIndentations))) {
    editor.setSoftTabs(true);
    editor.setTabLength(indent);
  }
}

function bestOf(counts) {
  var best = 0;
  var score = 0;
  for (var vote in counts) {
    vote = parseInt(vote);
    if (possibleIndentations.indexOf(vote) > -1 && counts[vote] > score) {
      best = vote;
      score = counts[vote];
    }
  }
  return best;
}

function getIndent(editor) {
  var row = -1;
  var counts = {};
  var previousIndent = 0;
  var previousDiff = 0;
  var numberOfCounts = 0;
  for (var line of editor.getBuffer().getLines()) {
    if (numberOfCounts > 150) break;
    row += 1;
    if (!isValidLine(row, line, editor)) continue;
    var indent = lineIndent(line);

    if (indent == 'tab') return 'tab';
    var diff = Math.abs(indent - previousIndent);

    if (diff == 0) {
      if (previousDiff != 0 && indent != 0) {
        counts[previousDiff] += 1;
      }
    } else {
      if (!counts[diff]) counts[diff] = 0;
      counts[diff] += 1;
      previousDiff = diff;
    }

    previousIndent = indent;
    numberOfCounts += 1;
  }
  if (enableDebug) {
    console.log('Indent Detective report for ' + editor.buffer.getBaseName());
    console.log(counts);
  }
  return bestOf(counts);
}

function isValidLine(row, line, editor) {
  // empty line
  if (line.match(/^\s*$/)) return false;

  // line is part of a comment or string
  for (var scope of editor.scopeDescriptorForBufferPosition([row, 0]).scopes) {
    if (scope.indexOf('comment') > -1 || scope.indexOf('docstring') > -1 || scope.indexOf('string') > -1) {
      return false;
    }
  }

  return true;
}

function lineIndent(line) {
  if (line.match(/^\t+/)) {
    return 'tab';
  } else {
    return line.match(/^([ ]*)/)[0].length;
  }
}

function select() {
  var items = [{ text: 'Automatic' }];
  for (var n of possibleIndentations) {
    items.push({ text: n + ' Spaces', length: n });
  }
  items.push({ text: 'Tabs', length: 'tab' });
  _selector2['default'].show(items, function () {
    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var text = _ref.text;
    var length = _ref.length;

    var editor = atom.workspace.getActiveTextEditor();
    if (text == 'Automatic') {
      manual['delete'](editor);
      run(editor);
    } else {
      setSettings(editor, length);
      manual.add(editor);
      _status2['default'].update(editor);
    }
  });
}

var config = {
  possibleIndentations: {
    type: 'array',
    // HACK: array of strings because settings-view is broken
    'default': ['2', '3', '4', '6', '8'],
    items: {
      type: 'string'
    },
    order: 1
  },
  enableDebugMessages: {
    type: 'boolean',
    'default': false,
    order: 2
  }
};
exports.config = config;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,