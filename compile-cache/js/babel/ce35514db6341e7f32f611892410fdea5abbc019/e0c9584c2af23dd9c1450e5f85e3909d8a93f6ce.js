Object.defineProperty(exports, '__esModule', {
  value: true
});

var _connection = require('../connection');

var _ui = require('../ui');

'use babel';

var _webview = _ui.views.tags.webview;

function consoleLog(e) {
  var log = undefined;
  if (e.level === 0) {
    log = console.log;
  } else if (e.level === 1) {
    log = console.warn;
  } else if (e.level === 2) {
    log = console.error;
  }
  log(e.message, '\nat ' + e.sourceID + ':' + e.line);
}

// https://stackoverflow.com/a/5100158/12113178
function dataURItoBlob(dataURI) {
  // convert base64/URLEncoded data component to raw binary data held in a string
  var byteString = undefined;
  if (dataURI.split(',')[0].indexOf('base64') >= 0) byteString = atob(dataURI.split(',')[1]);else byteString = unescape(dataURI.split(',')[1]);

  // separate out the mime component
  var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

  // write the bytes of the string to a typed array
  var ia = new Uint8Array(byteString.length);
  for (var i = 0; i < byteString.length; i++) {
    ia[i] = byteString.charCodeAt(i);
  }

  return new Blob([ia], { type: mimeString });
}

exports['default'] = {
  activate: function activate() {
    var _this = this;

    _connection.client.handle({
      plot: function plot(x) {
        return _this.show(x);
      },
      plotsize: function plotsize() {
        return _this.plotSize();
      },
      ploturl: function ploturl(url) {
        return _this.ploturl(url);
      },
      jlpane: function jlpane(id, opts) {
        return _this.jlpane(id, opts);
      }
    });
    this.create();

    atom.config.observe('julia-client.uiOptions.usePlotPane', function (enabled) {
      if (enabled) {
        return _this.pane.setTitle('Plots');
      } else {
        return _this.pane.setTitle('Plots (disabled)');
      }
    });

    return atom.config.observe('julia-client.uiOptions.layouts.plotPane.defaultLocation', function (defaultLocation) {
      _this.pane.setDefaultLocation(defaultLocation);
    });
  },

  create: function create() {
    return this.pane = this.ink.PlotPane.fromId('default');
  },

  open: function open() {
    return this.pane.open({
      split: atom.config.get('julia-client.uiOptions.layouts.plotPane.split') });
  },

  ensureVisible: function ensureVisible() {
    return this.pane.ensureVisible({ split: atom.config.get('julia-client.uiOptions.layouts.plotPane.split') });
  },

  close: function close() {
    return this.pane.close();
  },

  show: function show(view) {
    this.ensureVisible();
    var v = _ui.views.render(view);
    this.pane.show(new this.ink.Pannable(v), {
      maxSize: atom.config.get('julia-client.uiOptions.maxNumberPlots')
    });
    return v;
  },

  plotSize: function plotSize() {
    var _this2 = this;

    return this.ensureVisible().then(function () {
      return {
        size: _this2.pane.size(),
        ratio: window.devicePixelRatio
      };
    });
  },

  webview: function webview(url) {
    var isDataURI = url.startsWith('data');
    if (isDataURI) {
      var object = dataURItoBlob(url);
      url = URL.createObjectURL(object);
    }

    var v = _ui.views.render(_webview({
      'class': 'blinkjl',
      src: url,
      style: 'width: 100%; height: 100%'
    }));
    v.classList.add('native-key-bindings');
    v.addEventListener('console-message', function (e) {
      return consoleLog(e);
    });
    if (isDataURI) {
      v.addEventListener('dom-ready', function (e) {
        URL.revokeObjectURL(url);
      });
    }
    return v;
  },

  ploturl: function ploturl(url) {
    var v = this.webview(url);
    this.ensureVisible();
    return this.pane.show(v, {
      maxSize: atom.config.get('julia-client.uiOptions.maxNumberPlots')
    });
  },

  jlpane: function jlpane(id, opts) {
    if (opts == null) {
      opts = {};
    }
    var v = undefined;
    if (opts.url) {
      v = this.webview(opts.url);
      if (opts.devtools) {
        v.addEventListener('dom-ready', function () {
          return v.openDevTools();
        });
      }
    }

    var pane = this.ink.HTMLPane.fromId(id);

    if (opts.close) {
      return pane.close();
    } else if (opts.destroy) {
      if (pane.closeAndDestroy) {
        return pane.closeAndDestroy();
      }
    } else {
      pane.show({
        item: v,
        icon: opts.icon,
        title: opts.title
      });

      return pane.ensureVisible({
        split: opts.split || atom.config.get('julia-client.uiOptions.layouts.plotPane.split')
      });
    }
  }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,