Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.activate = activate;
exports.open = open;
exports.close = close;
exports.deactivate = deactivate;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _atom = require('atom');

var _underscorePlus = require('underscore-plus');

var _connection = require('../connection');

var _modules = require('./modules');

var _modules2 = _interopRequireDefault(_modules);

'use babel';

var updateeditor = _connection.client['import']('updateeditor');
var pane = undefined,
    subs = undefined,
    edSubs = undefined,
    outline = undefined;

function activate(ink) {
  pane = ink.Outline.fromId('Julia-Outline');
  subs = new _atom.CompositeDisposable();
  edSubs = new _atom.CompositeDisposable();
  outline = [];

  subs.add(atom.config.observe('julia-client.uiOptions.layouts.outline.defaultLocation', function (defaultLocation) {
    pane.setDefaultLocation(defaultLocation);
  }), atom.workspace.onDidStopChangingActivePaneItem((0, _underscorePlus.throttle)(function (ed) {
    return watchEditor(ed);
  }, 300)), atom.packages.onDidActivateInitialPackages(function () {
    return watchEditor(atom.workspace.getActivePaneItem());
  }), _connection.client.onDetached(function () {
    outline = [];
    pane.setItems([]);
  }), new _atom.Disposable(function () {
    outline = [];
    pane.setItems([]);
    if (edSubs) edSubs.dispose();
  }));
}

function watchEditor(ed) {
  if (!(ed && ed instanceof _atom.TextEditor)) return;

  if (edSubs) edSubs.dispose();
  edSubs = new _atom.CompositeDisposable(); // we can't repeat disposing on the same `CompositeDisposable` object

  if (ed.getGrammar().id !== 'source.julia') {
    pane.setItems([]);
  } else {
    edSubs.add(ed.onDidStopChanging((0, _underscorePlus.throttle)(function () {
      return updateEditor(ed);
    }, 300)), ed.onDidChangeCursorPosition((0, _underscorePlus.throttle)(function () {
      return updateOutline(ed);
    }, 300)));
    updateEditor(ed, { updateSymbols: false });
  }
  edSubs.add(ed.onDidDestroy(function () {
    outline = [];
    pane.setItems([]);
  }), ed.onDidChangeGrammar(function (grammar) {
    watchEditor(ed);
  }));
}

// NOTE: update outline and symbols cache all in one go
function updateEditor(ed) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {
    updateSymbols: true
  } : arguments[1];

  if (!_connection.client.isActive()) return new Promise(function (resolve) {
    return resolve([]);
  });

  var text = ed.getText();
  var currentModule = _modules2['default'].current();
  var mod = currentModule ? currentModule : 'Main';
  var path = ed.getPath() || 'untitled-' + ed.getBuffer().getId();

  updateeditor({
    text: text,
    mod: mod,
    path: path,
    // https://github.com/JunoLab/Juno.jl/issues/407
    updateSymbols: options.updateSymbols
  }).then(function (outlineItems) {
    outline = handleOutline(ed, outlineItems);
  })['catch'](function (err) {
    console.log(err);
  });
}

function handleOutline(ed, outlineItems) {
  var cursorLine = ed.getCursorBufferPosition().row + 1;

  outlineItems = outlineItems.map(function (outlineItem) {
    outlineItem.isActive = outlineItem.start <= cursorLine && cursorLine <= outlineItem.stop;
    outlineItem.onClick = function () {
      for (var _pane of atom.workspace.getPanes()) {
        if (_pane.getItems().includes(ed)) {
          _pane.activate();
          _pane.setActiveItem(ed);
          ed.setCursorBufferPosition([outlineItem.start - 1, 0]);
          ed.scrollToCursorPosition();
          break;
        }
      }
    };
    return outlineItem;
  });

  pane.setItems(outlineItems);
  return outlineItems;
}

function updateOutline(ed) {
  var cursorLine = ed.getCursorBufferPosition().row + 1;
  outline = outline.map(function (item) {
    item.isActive = item.start <= cursorLine && cursorLine <= item.stop;
    return item;
  });
  pane.setItems(outline);
}

function open() {
  return pane.open({
    split: atom.config.get('julia-client.uiOptions.layouts.outline.split')
  });
}

function close() {
  return pane.close();
}

function deactivate() {
  if (subs) subs.dispose();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,