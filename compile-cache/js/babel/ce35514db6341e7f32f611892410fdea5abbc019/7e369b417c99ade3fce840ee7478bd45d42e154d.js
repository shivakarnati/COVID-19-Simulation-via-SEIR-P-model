Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.formatCode = formatCode;
exports.activate = activate;
exports.deactivate = deactivate;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _connection = require('../connection');

var _atom = require('atom');

var format = _connection.client['import']('format');

function formatCode() {
  var editor = atom.workspace.getActiveTextEditor();
  if (!editor) return;

  var selections = editor.getSelections();
  if (selections.length === 1 && !selections[0].getText()) {
    formatEditor(editor);
  } else {
    selections.forEach(function (selection) {
      formatEditorWithSelection(editor, selection);
    });
  }
}

function formatEditor(editor) {
  var range = editor.getBuffer().getRange();
  return formatEditorTextInRange(editor, range, editor.getText());
}

function formatEditorWithSelection(editor, selection) {
  var range = selection.getBufferRange();
  return formatEditorTextInRange(editor, range, selection.getText());
}

function formatEditorTextInRange(editor, range, text) {
  var dir = _path2['default'].dirname(_connection.client.editorPath(editor));
  var marker = markRange(editor, range);
  // NOTE: Branch on `getSoftTabs` if supported by formatter.
  var indent = editor.getTabLength();
  var margin = editor.getPreferredLineLength();
  format({
    text: text,
    dir: dir,
    indent: indent,
    margin: margin
  }).then(function (_ref) {
    var error = _ref.error;
    var formattedtext = _ref.formattedtext;

    if (error) {
      atom.notifications.addError('Julia-Client: Format-Code', {
        description: error,
        dismissable: true
      });
    } else {
      if (marker.isValid()) {
        var pos = editor.getCursorBufferPosition();
        editor.setTextInBufferRange(marker.getBufferRange(), formattedtext);
        editor.scrollToBufferPosition(pos);
        editor.setCursorBufferPosition(pos);
      } else {
        atom.notifications.addError('Julia-Client: Format-Code', {
          description: 'Cancelled the formatting task because the selected code has been manually modified.',
          dismissable: true
        });
      }
    }
  })['catch'](function (err) {
    console.log(err);
  })['finally'](function () {
    marker.destroy();
  });
}

function markRange(editor, range) {
  var marker = editor.markBufferRange(range, {
    invalidate: 'inside'
  });
  editor.decorateMarker(marker, {
    type: 'highlight',
    'class': 'ink-block'
  });
  return marker;
}

var subs = undefined;

function activate() {
  subs = new _atom.CompositeDisposable();
  var edWatch = new WeakSet();

  subs.add(atom.workspace.observeTextEditors(function (ed) {
    edWatch.add(ed);
    // use onDidSave instead of onWillSave to guarantee our formatter is the last to run:
    var edsub = ed.getBuffer().onDidSave(function () {
      if (ed && ed.getGrammar && ed.getGrammar().id === 'source.julia') {
        if (_connection.client.isActive() && edWatch.has(ed)) {
          formatEditor(ed).then(function () {
            edWatch['delete'](ed);
            ed.save().then(function () {
              edWatch.add(ed);
            })['catch'](function (err) {
              console.log(err);
            });
          })['catch'](function (err) {
            console.log(err);
          });
        }
      }
    });
    subs.add(edsub);

    subs.add(ed.onDidDestroy(function () {
      edsub.dispose();
    }));
  }));
}

function deactivate() {
  subs && subs.dispose && subs.dispose();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,