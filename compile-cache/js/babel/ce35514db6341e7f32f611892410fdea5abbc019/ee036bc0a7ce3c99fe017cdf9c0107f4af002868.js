Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getRange = getRange;
exports.get = get;
exports.moveNext = moveNext;
exports.movePrev = movePrev;

var _weaveJs = require('./weave.js');

var _blocksJs = require('./blocks.js');

var _atom = require('atom');

'use babel';

function getRange(ed) {
  // Cell range is:
  //  Start of line below top delimiter (and/or start of top row of file) to
  //  End of line before end delimiter
  var buffer = ed.getBuffer();
  var start = buffer.getFirstPosition();
  var end = buffer.getEndPosition();
  var regexString = '^(' + atom.config.get('julia-client.uiOptions.cellDelimiter').join('|') + ')';
  var regex = new RegExp(regexString);
  var cursor = ed.getCursorBufferPosition();
  cursor.column = Infinity; // cursor on delimiter line means eval cell below

  var foundDelim = false;
  for (var i = cursor.row + 1; i <= ed.getLastBufferRow(); i++) {
    var _getLine = (0, _blocksJs.getLine)(ed, i);

    var line = _getLine.line;
    var scope = _getLine.scope;

    foundDelim = regex.test(line) && scope.join('.').indexOf('comment.line') > -1;
    end.row = i;
    if (foundDelim) break;
  }

  if (foundDelim) {
    end.row -= 1;
    if (end.row < 0) end.row = 0;
    end.column = Infinity;
  }

  foundDelim = false;
  if (cursor.row > 0) {
    for (var i = end.row; i >= 0; i--) {
      var _getLine2 = (0, _blocksJs.getLine)(ed, i);

      var line = _getLine2.line;
      var scope = _getLine2.scope;

      foundDelim = regex.test(line) && scope.join('.').indexOf('comment.line') > -1;
      start.row = i;
      if (foundDelim) {
        break;
      }
    }
    start.column = 0;
  }

  return [start, end];
}

function get(ed) {
  if (ed.getGrammar().scopeName.indexOf('source.julia') > -1) {
    return jlGet(ed);
  } else {
    return (0, _weaveJs.get)(ed);
  }
}

function jlGet(ed) {
  var range = getRange(ed);
  var text = ed.getTextInBufferRange(range);
  if (text.trim() === '') text = ' ';
  var res = {
    range: [[range[0].row, range[0].column], [range[1].row, range[1].column]],
    selection: ed.getSelections()[0],
    line: range[0].row,
    text: text
  };
  return [res];
}

function moveNext(ed) {
  if (ed == null) {
    ed = atom.workspace.getActiveTextEditor();
  }
  if (ed.getGrammar().scopeName.indexOf('source.julia') > -1) {
    return jlMoveNext(ed);
  } else {
    return (0, _weaveJs.moveNext)(ed);
  }
}

function jlMoveNext(ed) {
  var range = getRange(ed);
  var sel = ed.getSelections()[0];
  var nextRow = range[1].row + 2; // 2 = 1 to get to delimiter line + 1 more to go past it
  return sel.setBufferRange([[nextRow, 0], [nextRow, 0]]);
}

function movePrev(ed) {
  if (ed == null) {
    ed = atom.workspace.getActiveTextEditor();
  }
  if (ed.getGrammar().scopeName.indexOf('source.weave') > -1) {
    return (0, _weaveJs.movePrev)(ed);
  } else {
    return jlMovePrev(ed);
  }
}

function jlMovePrev(ed) {
  var range = getRange(ed);
  var prevRow = range[0].row - 2; // 2 = 1 to get to delimiter line + 1 more to go past it
  var sel = ed.getSelections()[0];
  return sel.setBufferRange([[prevRow, 0], [prevRow, 0]]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,