Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.activate = activate;
exports.show = show;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */

var _atomSelectList = require('atom-select-list');

var _atomSelectList2 = _interopRequireDefault(_atomSelectList);

/**
 * @type {SelectList}
 */
var selector = undefined;
var panel = undefined,
    ink = undefined;

function activate(_ink) {
  ink = _ink;
  selector = new _atomSelectList2['default']({
    items: [],
    elementForItem: elementForItem
  });
  selector.element.classList.add('command-palette', 'julia-client-selector');
  panel = atom.workspace.addModalPanel({ item: selector.element });
}

function elementForItem(item, _ref) {
  var selected = _ref.selected;

  var view = document.createElement('li');
  if (selected) view.classList.add('active');
  var name = item.primary ? item.primary.toString() : item.toString();
  var primary = ink.matchHighlighter.highlightMatches(name, selector.getFilterQuery());
  view.appendChild(primary);
  if (item.secondary) {
    var secondary = document.createElement('div');
    secondary.classList.add('secondary-line', 'path');
    secondary.innerText = item.secondary;
    view.classList.add('two-lines');
    primary.classList.add('primary-line');
    view.append(secondary);
  }
  return view;
}

function show(items) {
  var _ref2 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var active = _ref2.active;
  var emptyMessage = _ref2.emptyMessage;
  var errorMessage = _ref2.errorMessage;
  var infoMessage = _ref2.infoMessage;
  var allowCustom = _ref2.allowCustom;

  selector.update({
    items: [],
    query: '',
    loadingMessage: 'Loading ...'
  });
  var lastFocusedPane = atom.workspace.getActivePane();
  panel.show();
  selector.focus();
  var confirmed = false;
  return new Promise(function (resolve, reject) {
    // HACK:
    // we can't pass those callback functions to `update` while atom-select-list's document says they can be ...
    selector.props.didConfirmSelection = function (item) {
      confirmed = true;
      selector.cancelSelection();
      resolve(item);
    };
    selector.props.didConfirmEmptySelection = function () {
      confirmed = true;
      selector.cancelSelection();
      var query = selector.getQuery();
      if (allowCustom && query.length > 0) {
        resolve(query);
      } else {
        resolve();
      }
    };
    selector.props.didCancelSelection = function () {
      panel.hide();
      lastFocusedPane.activate();
      var query = selector.getQuery();
      if (!confirmed) {
        if (allowCustom && query.length > 0) {
          resolve(query);
        } else {
          resolve();
        }
      }
    };
    // for handling `Promise`
    function updateSelector(items) {
      selector.props.filterKeyForItem = items.length > 0 && items[0] instanceof Object ? function (item) {
        return item.primary;
      } : function (item) {
        return item;
      };
      selector.update({
        items: items,
        emptyMessage: emptyMessage,
        errorMessage: errorMessage,
        infoMessage: infoMessage,
        loadingMessage: ''
      });
      if (active) selectActiveItem(selector, items, active);
    }
    if (items.constructor == Promise) {
      items.then(function (items) {
        updateSelector(items);
      })['catch'](function (err) {
        reject(err);
        selector.cancelSelection();
      });
    } else {
      updateSelector(items);
    }
  });
}

function selectActiveItem(selector, items, active) {
  var index = active instanceof Number ? active : active instanceof Function ? items.findIndex(active) : items.length > 0 && items[0].primary ? items.findIndex(function (item) {
    return item.primary === active;
  }) : items.indexOf(active);
  if (index === -1) return; // do nothing
  selector.selectIndex(index);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,