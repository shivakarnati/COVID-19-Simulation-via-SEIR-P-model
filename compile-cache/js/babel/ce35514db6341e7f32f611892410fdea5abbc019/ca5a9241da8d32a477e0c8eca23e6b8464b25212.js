Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.isStringScope = isStringScope;
exports.forLines = forLines;
exports.isCommentScope = isCommentScope;
exports.isValidScopeToInspect = isValidScopeToInspect;
/** @babel */

var _atom = require('atom');

var juliaScopes = ['source.julia', 'source.embedded.julia'];
var openers = ['if', 'while', 'for', 'begin', 'function', 'macro', 'module', 'baremodule', 'type', 'immutable', 'struct', 'mutable struct', 'try', 'let', 'do', 'quote', 'abstract type', 'primitive type'];
var reopeners = ['else', 'elseif', 'catch', 'finally'];

function isKeywordScope(scopes) {
  // Skip 'source.julia'
  return scopes.slice(1).some(function (scope) {
    return scope.indexOf('keyword') > -1;
  });
}

function isStringScope(scopes) {
  var isString = false;
  var isInterp = false;
  for (var scope of scopes) {
    if (scope.indexOf('string') > -1) {
      isString = true;
    }
    if (scope.indexOf('interpolation') > -1) {
      isInterp = true;
    }
  }
  return isString && !isInterp;
}

function forRange(editor, range) {
  // this should happen here and not a top-level so that we aren't relying on
  // Atom to load packages in a specific order:
  var juliaGrammar = atom.grammars.grammarForScopeName('source.julia');

  if (juliaGrammar === undefined) return [];

  var scopes = [];
  var n_parens = 0;
  var n_brackets = 0;
  var text = editor.getTextInBufferRange(range);
  juliaGrammar.tokenizeLines(text).forEach(function (lineTokens) {
    lineTokens.forEach(function (token) {
      var value = token.value;

      if (!isStringScope(token.scopes)) {
        if (n_parens > 0 && value === ')') {
          n_parens -= 1;
          scopes.splice(scopes.lastIndexOf('paren'), 1);
          return;
        } else if (n_brackets > 0 && value === ']') {
          n_brackets -= 1;
          scopes.splice(scopes.lastIndexOf('bracket'), 1);
          return;
        } else if (value === '(') {
          n_parens += 1;
          scopes.push('paren');
          return;
        } else if (value === '[') {
          n_brackets += 1;
          scopes.push('bracket');
          return;
        }
      }
      if (!isKeywordScope(token.scopes)) return;
      if (!(n_parens === 0 && n_brackets === 0)) return;

      var reopen = reopeners.includes(value);
      if (value === 'end' || reopen) scopes.pop();
      if (openers.includes(value) || reopen) scopes.push(value);
    });
  });
  return scopes;
}

function forLines(editor, start, end) {
  var startPoint = new _atom.Point(start, 0);
  var endPoint = new _atom.Point(end, Infinity);
  var range = new _atom.Range(startPoint, endPoint);
  return forRange(editor, range);
}

function isCommentScope(scopes) {
  // Skip 'source.julia'
  return scopes.slice(1).some(function (scope) {
    return scope.indexOf('comment') > -1;
  });
}

/**
 * Returns `true` if the scope at `bufferPosition` in `editor` is valid code scope to be inspected.
 * Supposed to be used within Atom-IDE integrations, whose `grammarScopes` setting doesn't support
 * embedded scopes by default.
 */

function isValidScopeToInspect(editor, bufferPosition) {
  var scopes = editor.scopeDescriptorForBufferPosition(bufferPosition).getScopesArray();
  return scopes.some(function (scope) {
    return juliaScopes.includes(scope);
  }) ? !isCommentScope(scopes) && !isStringScope(scopes) : false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,